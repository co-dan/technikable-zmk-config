/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/matrix_transform.h>


#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BASE 0
#define LOWER 1
#define RAISE 2
#define BLE 3

#define BT(n) BT_SEL n

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

&caps_word {
	continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};


/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NAV_L NUM_L>;
	    then-layer = <SYM_L>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp Q   &kp W       &kp E         &kp R         &kp T           &kp ESC     &kp BKSP         &kp Y            &kp U          &kp I        &kp O      &kp P         
 &kp A   &hl LGUI S  &hl LSHFT D   &hs LCTRL F   &kp G           &kp TAB     &kp QUOT         &kp H            &hs RCTRL J    &hr RSHFT K  &hr RGUI L &kp SEMI      
 &kp Z   &kp X       &kp C         &kp V         &kp B           &kp LSHFT   &kp RET          &kp N            &kp M          &kp COMMA    &kp DOT    &kp FSLH 
//#ifdef TBLE_ORTHO
                     &kp LCTRL     &mt LGUI ESC  &lt LOWER BSPC  &kp SPACE   &kp SPACE        &lt RAISE SPACE  &mt RALT RET   &kp RCTRL
/* #elif defined(TBLE_MIT) */
/*                  &kp LCTRL  &kp LALT    &mo NAV_L          &kp SPACE                   &mo NUM_L      &kp RALT    &kp RCTRL */
/* #else // TBLE_DUAL_2U */
/*                  &kp LCTRL  &mt LGUI ESC  &lt LOWER BSPC             &lt NUM_L SPACE              &kp RALT    &kp RCTRL */
/* #endif */
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
&kp EXCL        &kp AT          &kp HASH        &kp DLLR        &kp PRCNT     &kp ESC     &kp BKSP       &kp CARET       &kp AMPS                &kp STAR                &kp MINUS       &kp EQUAL
&kp TILDE	&kp UNDER	&kp PLUS	&kp PIPE  	&kp DQT       &kp TAB     &kp QUOT       &kp LEFT	&kp DOWN		&kp UP		        &kp RIGHT       &kp SQT
&trans  	&trans		&trans		&trans		&trans        &kp LSHFT   &kp RET        &kp UNDER	&kp KP_PLUS		&kp LBKT		&kp RBKT	&kp BSLH
#ifdef TBLE_DUAL_2U
                      &trans     &trans              &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
                      &trans     &trans      &trans                &trans             &trans      &trans   &trans
#else
                      &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans
#endif // ORTHO
            >;
        };

        raise_layer {
            label = "Raise";
            bindings = <
&kp N1   	&kp N2      &kp N3	&kp N4		&kp N5	   &kp ESC     &kp BKSP	      &kp N6  	&kp N7		&kp N8		&kp N9		&kp N0
&kp GRAVE       &kp MINUS   &kp EQUAL	&kp BSLH	&kp APOS   &kp TAB     &kp QUOT       &kp LEFT  &kp DOWN	&kp UP  	&kp RIGHT	&kp SQT
&kp LBRC       	&kp RBRC    &kp LPAR    &kp RPAR	&kp COLON  &kp LSHFT   &kp RET        &trans  	&trans		&trans		&trans		&kp BSLH
#ifdef TBLE_DUAL_2U
                     &trans     &kp N0              &trans                 &trans            &trans         &trans
#elif defined(TBLE_MIT)
                     &trans     &kp N0      &trans           &none            &kp ESC        &kp DEL      &trans
#else
                     &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans
#endif
            >;
        };

        ble_layer {
            label = "Ble";
            bindings = <
&none    	&none	        &none	   &none         	&none	 &bootloader	&none        &out OUT_USB	&out OUT_BLE	&none		&none			&none
&none	        &none	        &none	   &none	        &none    &reset 	&none	     &bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3     	&bt BT_SEL 4
&bt BT_PRV	&bt BT_NXT	&bt BT_CLR &none         	&none	 &none          &none        &none         	&none		&none	        &kp C_VOL_DN            &kp C_VOL_UP
#ifdef TBLE_DUAL_2U
                      &trans     &kp LS(N0)              &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
                      &trans     &kp LS(N0)      &trans                &trans             &trans      &trans   &trans
#else
                      &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans
#endif
            >;
        };

    };
};

/ {
	combos {
		compatible = "zmk,combos";
		combo_bleLayer {
			timeout-ms = <50>;
			key-positions = <RC(3,5) RC(3,6)>;
			bindings = <&mo BLE>;
		};
		combo_caps-word {
			timeout-ms = <50>;
			key-positions = <RC(1,4) RC(1,8)>;
			bindings = <&caps_word>;
		};
	};

	behaviors {
		hl: homerow_mods_left {
			compatible = "zmk,behavior-hold-tap";
			label = "homerow mods left";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <100>;
			// global-quick-tap;
			bindings = <&kp>, <&kp>;
			// opposite side hand keys
			hold-trigger-key-positions = <RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
                                                      RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
                                                      RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)>;
		};

		hr: homerow_mods_right {
			compatible = "zmk,behavior-hold-tap";
			label = "homerow mods right";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <100>;
			// global-quick-tap;
			bindings = <&kp>, <&kp>;
			// opposite side hand keys
			hold-trigger-key-positions = <RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)
                                                      RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)
                                                      RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)>;
		};

		hs: homerow_mods_shift {
			compatible = "zmk,behavior-hold-tap";
			label = "homerow mods shift";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <100>;
			bindings = <&kp>, <&kp>;
		};
	};
        

};

